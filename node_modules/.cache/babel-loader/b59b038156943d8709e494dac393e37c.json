{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\go\\\\src\\\\github.com\\\\kevsbry\\\\react projects\\\\mophoria\\\\src\\\\components\\\\pages\\\\movies_tvs\\\\Movies.js\";\nimport React from \"react\";\nimport style from \"./movies_tvs.module.css\";\nimport axios from \"axios\";\nimport Title from \"../../globalComponents/Title\";\nimport Item from \"./Item\";\nimport Filter from \"./Filter\";\n\nclass Movies extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apiKey: \"325d84ad33eb95a5c0fc5427ba3f569a\",\n      items: [],\n      itemsCopy: [],\n      initialItemsValue: [],\n      selectedGenreID: \"All\",\n      selectedYear: \"All\",\n      type: \"movie\"\n    };\n\n    this.getYear = date => {\n      let str = String(date);\n      return str.substring(0, 4);\n    };\n\n    this.onSearch = async e => {\n      //change items on search\n      if (e.target.value === \"\") {\n        this.setState(() => {\n          return {\n            items: [...this.state.initialItemsValue]\n          };\n        });\n      } else {\n        await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${this.state.apiKey}&language=en-US&page=1&include_adult=false&query=${e.target.value}`).then(res => {\n          this.setState(() => {\n            return {\n              items: res.data.results,\n              itemsCopy: res.data.results\n            };\n          });\n        }).catch(err => console.log(err)); //filter search result based on selected genre / year\n\n        this.onChangeGenre(this.state.selectedGenreID);\n        this.onChangeYear(this.state.selectedYear);\n      }\n    };\n\n    this.onChangeGenre = genre => {\n      if (genre !== this.state.selectedGenreID) {\n        this.setState(() => {\n          return {\n            selectedGenreID: genre\n          };\n        });\n      }\n\n      const {\n        itemsCopy\n      } = this.state;\n      let newItems = [];\n\n      if (String(genre) !== \"All\") {\n        for (let i = 0; i < itemsCopy.length; i++) {\n          for (let genre_id = 0; genre_id < itemsCopy[i].genre_ids.length; genre_id++) {\n            if (itemsCopy[i].genre_ids[genre_id] === parseInt(genre)) {\n              newItems.push(itemsCopy[i]);\n            }\n          }\n        }\n\n        this.setState(() => {\n          return {\n            items: [...newItems]\n          };\n        });\n      } else {\n        this.setState(() => {\n          return {\n            items: [...this.state.itemsCopy]\n          };\n        });\n      }\n    };\n\n    this.onChangeYear = year => {\n      if (year !== this.state.selectedYear) {\n        this.setState(() => {\n          return {\n            selectedYear: year\n          };\n        });\n      }\n\n      if (year !== \"All\") {\n        this.setState(() => {\n          return {\n            items: this.state.itemsCopy.filter(item => this.getYear(item.release_date) === year)\n          };\n        });\n      } else {\n        this.setState(() => {\n          return {\n            items: this.state.itemsCopy\n          };\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      apiKey\n    } = this.state; //initial items\n\n    await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=1`).then(res => {\n      this.setState(() => {\n        return {\n          items: res.data.results,\n          itemsCopy: res.data.results,\n          initialItemsValue: res.data.results\n        };\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      items,\n      type\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: style.movies,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Title, {\n      titleName: \"Search movies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Filter, {\n      apiKey: this.state.apiKey,\n      onSearch: this.onSearch,\n      onChangeGenre: this.onChangeGenre,\n      onChangeYear: this.onChangeYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: style[\"items-container\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, items.map((item, i) => React.createElement(Item, {\n      key: item.id,\n      item: item,\n      type: type,\n      itemNum: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["C:/Users/kevin/go/src/github.com/kevsbry/react projects/mophoria/src/components/pages/movies_tvs/Movies.js"],"names":["React","style","axios","Title","Item","Filter","Movies","Component","state","apiKey","items","itemsCopy","initialItemsValue","selectedGenreID","selectedYear","type","getYear","date","str","String","substring","onSearch","e","target","value","setState","get","then","res","data","results","catch","err","console","log","onChangeGenre","onChangeYear","genre","newItems","i","length","genre_id","genre_ids","parseInt","push","year","filter","item","release_date","componentDidMount","render","movies","map","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport style from \"./movies_tvs.module.css\";\r\nimport axios from \"axios\";\r\nimport Title from \"../../globalComponents/Title\";\r\nimport Item from \"./Item\";\r\nimport Filter from \"./Filter\";\r\n\r\nclass Movies extends React.Component {\r\n  state = {\r\n    apiKey: \"325d84ad33eb95a5c0fc5427ba3f569a\",\r\n    items: [],\r\n    itemsCopy: [],\r\n    initialItemsValue: [],\r\n    selectedGenreID: \"All\",\r\n    selectedYear: \"All\",\r\n    type: \"movie\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { apiKey } = this.state;\r\n    //initial items\r\n    await axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=1`\r\n      )\r\n      .then(res => {\r\n        this.setState(() => {\r\n          return {\r\n            items: res.data.results,\r\n            itemsCopy: res.data.results,\r\n            initialItemsValue: res.data.results\r\n          };\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  getYear = date => {\r\n    let str = String(date);\r\n    return str.substring(0, 4);\r\n  };\r\n\r\n  onSearch = async e => {\r\n    //change items on search\r\n    if (e.target.value === \"\") {\r\n      this.setState(() => {\r\n        return {\r\n          items: [...this.state.initialItemsValue]\r\n        };\r\n      });\r\n    } else {\r\n      await axios\r\n        .get(\r\n          `https://api.themoviedb.org/3/search/movie?api_key=${this.state.apiKey}&language=en-US&page=1&include_adult=false&query=${e.target.value}`\r\n        )\r\n        .then(res => {\r\n          this.setState(() => {\r\n            return {\r\n              items: res.data.results,\r\n              itemsCopy: res.data.results\r\n            };\r\n          });\r\n        })\r\n        .catch(err => console.log(err));\r\n\r\n      //filter search result based on selected genre / year\r\n      this.onChangeGenre(this.state.selectedGenreID);\r\n      this.onChangeYear(this.state.selectedYear);\r\n    }\r\n  };\r\n\r\n  //FILTERS !\r\n  onChangeGenre = genre => {\r\n    if (genre !== this.state.selectedGenreID) {\r\n      this.setState(() => {\r\n        return {\r\n          selectedGenreID: genre\r\n        };\r\n      });\r\n    }\r\n\r\n    const { itemsCopy } = this.state;\r\n    let newItems = [];\r\n\r\n    if (String(genre) !== \"All\") {\r\n      for (let i = 0; i < itemsCopy.length; i++) {\r\n        for (\r\n          let genre_id = 0;\r\n          genre_id < itemsCopy[i].genre_ids.length;\r\n          genre_id++\r\n        ) {\r\n          if (itemsCopy[i].genre_ids[genre_id] === parseInt(genre)) {\r\n            newItems.push(itemsCopy[i]);\r\n          }\r\n        }\r\n      }\r\n      this.setState(() => {\r\n        return {\r\n          items: [...newItems]\r\n        };\r\n      });\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          items: [...this.state.itemsCopy]\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  onChangeYear = year => {\r\n    if (year !== this.state.selectedYear) {\r\n      this.setState(() => {\r\n        return {\r\n          selectedYear: year\r\n        };\r\n      });\r\n    }\r\n\r\n    if (year !== \"All\") {\r\n      this.setState(() => {\r\n        return {\r\n          items: this.state.itemsCopy.filter(\r\n            item => this.getYear(item.release_date) === year\r\n          )\r\n        };\r\n      });\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          items: this.state.itemsCopy\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { items, type } = this.state;\r\n\r\n    return (\r\n      <div className={style.movies}>\r\n        <Title titleName=\"Search movies\" />\r\n        <Filter\r\n          apiKey={this.state.apiKey}\r\n          onSearch={this.onSearch}\r\n          onChangeGenre={this.onChangeGenre}\r\n          onChangeYear={this.onChangeYear}\r\n        />\r\n        <div className={style[\"items-container\"]}>\r\n          {items.map((item, i) => (\r\n            <Item key={item.id} item={item} type={type} itemNum={i} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}